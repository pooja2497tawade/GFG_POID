class Solution {
    
    //for queue make Pair class , sort on the basis of path in ascending order  
    public static class Pair implements Comparable<Pair>{
        int node;
        int path;
        public Pair(int node, int path){
            this.node = node;
            this.path = path;
        }
        
        @Override
        public int compareTo(Pair p2){
            return this.path - p2.path;
        }
    }

	public int[] shortestPath(int N,int M, int[][] edges) {
		//Code here
		//make vis arr to track if nodes are visited or not
        boolean vis[] = new boolean[N];
        
        //make dist arr to store distances and initialize all with infinity except 0
        int dist[] = new int [N];
		for(int i=0; i<N; i++){
		    if(i != 0){
		        dist[i] = Integer.MAX_VALUE;
		    }
		}
		
		//use priority queue to get shortest first and node:0,path:0
		PriorityQueue<Pair> pq = new PriorityQueue<>();
		pq.add(new Pair(0,0));
		
		//using dijkstra's alogorithm
		
		while(!pq.isEmpty()){
		    Pair curr = pq.remove();
		    if(!vis[curr.node]){
		        vis[curr.node] = true;
		    }
		    
		    //traverse neighbors
		    for(int i=0; i<edges.length; i++){
		        int u = edges[i][0];
		        int v = edges[i][1];
		        int wt = edges[i][2];
		        
		        //dijkstra,s formula
		        if(dist[u] != Integer.MAX_VALUE && dist[u]+wt < dist[v]){
		            dist[v] = dist[u] + wt;
		            pq.add(new Pair(v,dist[v]));
		        }
		    }
		}
		
		//if some indices left with max value means we have not reached them ,
		//so put there -1
		for(int i=0; i<N; i++){
		    if(dist[i] == Integer.MAX_VALUE){
		        dist[i] = -1;
		    }
		}
		
		//at last return our dist array
		return dist;
	}
}
